/*
	Include in output:

	This file is part of Natural Docs, which is Copyright Â© 2003-2022 Code Clear LLC.
	Natural Docs is licensed under version 3 of the GNU Affero General Public
	License (AGPL).  Refer to License.txt or www.naturaldocs.org for the
	complete details.

	This file may be distributed with documentation files generated by Natural Docs.
	Such documentation is not covered by Natural Docs' copyright and licensing,
	and may have its own copyright and distribution terms as decided by its author.

*/

"use strict";


// Theme Members

	$Theme_Name = 0;
	$Theme_ID = 1;



/* Class: NDThemes
	_____________________________________________________________________________

    A class to manage and apply the available themes.

*/
var NDThemes = new function ()
	{

	// Group: Functions
	// ________________________________________________________________________


	/* Function: Apply
		Applies the passed theme ID, which includes changing the CSS class of the document body.
	*/
	this.Apply = function (themeID)
		{

		var newThemeID = themeID;
		var newEffectiveThemeID = themeID;
		var currentThemeID = this.selectedThemeID;
		var currentEffectiveThemeID = this.effectiveThemeID;

		
		// Determine if the effective theme ID is different

//		if (theme.StartsWith("Auto-"))
//			{
//			var systemTheme = this.GetSystemTheme();
//
//			if (systemTheme == "Light")
//				{  this.effectiveTheme = "Light";  }
//			else
//				{
//				if (theme == "Auto-Light/Dark")
//					{  this.effectiveTheme = "Dark";  }
//				else
//					{  this.effectiveTheme = "Black";  }
//				}
//			}

		
		// Replace the body's CSS class

		if (newEffectiveThemeID != currentEffectiveThemeID)
			{
			if (currentEffectiveThemeID != undefined)
				{  NDCore.RemoveClass(document.body, currentEffectiveThemeID + "Theme");  }

			// Note that the embedded script in each page may have already set the CSS class early.  That should be fine 
			// and this line will have no effect if that's the case.
			if (newEffectiveThemeID != undefined)
				{  NDCore.AddClass(document.body, newEffectiveThemeID + "Theme");  }
			}


		// Update the theme state

		this.selectedThemeID = newThemeID;
		this.effectiveThemeID = newEffectiveThemeID;
		};

	
	/* Function: SetThemes

		Sets the list of themes the documentation supports.  The parameter is an array of themes, and each theme entry
		is itself an array, the first value being its display name and the second value its ID.
		
		The ID should only contain characters that are valid for CSS class names.  When applied, it will be added to the
		document body as a CSS class with "Theme" appended, so "Light" would be added as "LightTheme".

		Example:

			--- Code ---
			NDThemes.Set([
			   [ "Light Theme", "Light" ],
			   [ "Dark Theme", "Dark" ],
			   [ "Black Theme", "Black" ]
			]);
			--------------
	*/
	this.SetThemes = function (themes)
		{
		this.allThemes = themes;
		};




	// Group: Support Functions
	// ________________________________________________________________________


	/* Function: GetSystemTheme
		Returns the operating system theme as the string "Light" or "Dark".  It defaults to "Light" if this isn't supported.
	*/
	this.GetSystemTheme = function ()
		{
		if (window.matchMedia && 
			window.matchMedia('(prefers-color-scheme: dark)').matches)
			{  return "Dark";  }
		else
			{  return "Light";  }
		};

	
	/* Function: AddSystemThemeChangeWatcher
		Sets a function to be called whenever the system theme changes.  The function will receive one parameter, the
		string "Light" or "Dark".
	*/
	this.AddSystemThemeChangeWatcher = function (changeWatcher)
		{
		if (window.matchMedia)
			{
			window.matchMedia('(prefers-color-scheme: dark)').addEventListener(
				'change',
				function (event)
					{
					var theme = event.matches ? "Dark" : "Light";
					changeWatcher(theme);
					}
				);
			}
		};

	
	
	// Group: Variables
	// ________________________________________________________________________


	/* var: allThemes

		An array of all the themes the documentation supports.  Each theme entry is itself an array, with the first
		value being its display name and the second value its ID.  The array will be undefined if none have been set.
		
		The ID should only contain characters that are valid for CSS class names.  When applied, it will be added to the
		document body as a CSS class with "Theme" appended, so "Light" would be added as "LightTheme".

		Example:

			--- Code ---
			[
			   [ "Light Theme", "Light" ],
			   [ "Dark Theme", "Dark" ],
			   [ "Black Theme", "Black" ]
			]
			-------------
		*/
	// this.allThemes = undefined;


	/* var: selectedThemeID
		The ID of the user-selected theme, which includes the auto values.  It will be undefined if one hasn't been set.
	*/
	// this.selectedThemeID = undefined;

	
	/* var: effectiveThemeID
		The ID of the effective theme, which translates any auto values from <selectedThemeID> to their result based 
		on the system theme.  Otherwise it will be the same as <selectedThemeID>.  It will be undefined if a theme 
		hasn't been set.
	*/
	// this.effectiveThemeID = undefined;

	};



/* _____________________________________________________________________________

	Class: NDThemeSwitcher
	_____________________________________________________________________________

    A class to manage the HTML theme switcher, which allows the end user to choose their own theme at runtime.

*/
var NDThemeSwitcher = new function ()
	{

	// Group: Functions
	// ________________________________________________________________________


	/* Function: Start

		Sets up the theme switcher.  It expects there to be an empty HTML element with ID NDThemeSwitcher
		in the document.  You can pass a function to it to be called whenever the theme changes.
	 */
	this.Start = function (onThemeChange)
		{
		// Add the event handler
		this.onThemeChange = onThemeChange;

		// Prepare the HTML elements
		var baseElement = document.getElementById("NDThemeSwitcher");

		var linkElement = document.createElement("a");
		linkElement.onclick = function () {  NDThemeSwitcher.Cycle();  };

		baseElement.appendChild(linkElement);
		};


	/* Function: IsNeeded
		Returns whether the theme switcher is necessary.  This will only return true if there are multiple themes
		defined in <NDThemes>.
	*/
	this.IsNeeded = function ()
		{
		return (NDThemes.allThemes != undefined &&
				   NDThemes.allThemes.length > 1);
		};


	/* Function: UpdateVisibility

		Creates or hides the theme switcher HTML elements depending on the results of <IsNeeded()>.  It returns whether
		the visibility changed.
		
		This should be called once to create it while setting up the page and again whenever the list of themes in <NDThemes>
		changes.
	*/
	this.UpdateVisibility = function ()
		{
		var themeSwitcher = document.getElementById("NDThemeSwitcher");

		var wasVisible = (themeSwitcher.style.display == "block");
		var shouldBeVisible = this.IsNeeded();

		if (!wasVisible && shouldBeVisible)
			{
			themeSwitcher.style.display = "block";
			return true;
			}
		else if (wasVisible && !shouldBeVisible)
			{
			themeSwitcher.style.display = "none";
			return true;
			}
		else
			{  return false;  }
		};


	/* Function: Cycle
		Switches to the next available theme in the list, restarting at the first if we're on the last one.
	*/
	this.Cycle = function ()
		{
		if (NDThemes.allThemes == undefined ||
			NDThemes.allThemes.length <= 1)
			{  return;  }

		var oldThemeID = NDThemes.selectedThemeID;
		var oldThemeIndex;

		for (var i = 0; i < NDThemes.allThemes.length; i++)
			{
			if (NDThemes.allThemes[i][$Theme_ID] == oldThemeID)
				{
				oldThemeIndex = i;
				break;
				}
			}

		var newThemeIndex;

		if (oldThemeIndex == undefined ||
			oldThemeIndex == NDThemes.allThemes.length - 1)
			{  newThemeIndex = 0;  }
		else
			{  newThemeIndex = oldThemeIndex + 1;  }

		NDThemes.Apply(NDThemes.allThemes[newThemeIndex][$Theme_ID]);

		if (this.onThemeChange != undefined)
			{  this.onThemeChange();  }
		};



	// Group: Variables
	// ________________________________________________________________________


	/* var: onThemeChange
		An event handler that will be called whenever the theme changes.
	*/
	// var onThemeChange = undefined;

	};